1.接口默认方法，类似抽象类，java的特性
优点：类可以实现多个接口，优化java只能单继承的缺点，只能继承一个抽象类
e.g.InterfaceDefaultMethod.java
2.Lambda 表达式
函数编程非常关键的几个特性如下：
（1）闭包与高阶函数
函数编程支持函数作为第一类对象，有时称为 闭包或者 仿函数（functor）对象。实质上，闭包是起函数的作用并可以像对象一样操作的对象。
与此类似，FP 语言支持 高阶函数。高阶函数可以用另一个函数（间接地，用一个表达式） 作为其输入参数，在某些情况下，它甚至返回一个函数作为其输出参数。
这两种结构结合在一起使得可以用优雅的方式进行模块化编程，这是使用 FP 的最大好处。
（2）惰性计算
在惰性计算中，表达式不是在绑定到变量时立即计算，而是在求值程序需要产生表达式的值时进行计算。延迟的计算使您可以编写可能潜在地生成无穷输出的函数。
因为不会计算多于程序的其余部分所需要的值，所以不需要担心由无穷计算所导致的 out-of-memory 错误。
（3）没有“副作用”
所谓"副作用"（side effect），指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果。
函数式编程强调没有"副作用"，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。
3.函数接口
函数接口是只有一个抽象方法的接口，用作Lambda表达式的返回值
接口包路径为java.lang.function，然后接口类上面都有@FunctionalInterface这个注解。下面列举几个较常见的接口类。
类别                      方法                  作用
Consumer<T>             void accept(T t)    处理对应的参数，无返回
Function<T, R>          R apply(T t)        处理参数t, 返回结果R
Predicate<T>            boolean test(T t)   根据参数t判断真假
Supplier<T>             T get()             难道对应的结果
BiFunction<T, U, R>     R apply(T t, U u)   根据参数t,u,得到结果R

4.流
高级的接口遍历器


